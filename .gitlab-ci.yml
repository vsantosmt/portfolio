workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'  # Executa o pipeline apenas na branch main
    - if: '$CI_COMMIT_BRANCH == "qa"' # Executa o pipeline apenas na branch qa

variables:
  VERSION: "2.0"
  PROJECT_TAG: "port-oci"

stages:
  - build
  - deploy
  - cleanup

build_frontend:
  stage: build
  tags:
    - $PROJECT_TAG
  script:
    - docker build -t vsantosmt/portfolio-frontend:$VERSION ./frontend

build_backend:
  stage: build
  tags:
    - $PROJECT_TAG
  needs:
    - build_frontend
  script:
    - docker build -t vsantosmt/portfolio-backend:$VERSION ./backend

push_image:
  stage: build
  tags:
    - $PROJECT_TAG
  needs:
    - build_frontend
    - build_backend
  script:
    - docker push vsantosmt/portfolio-frontend:$VERSION
    - docker push vsantosmt/portfolio-backend:$VERSION

execute_container:
  image: docker:24.0.5
  services:
  - docker:dind
  stage: deploy
  tags:
    - $PROJECT_TAG
  needs:
    - push_image
  before_script:
    - chmod +x script/remove_container.sh # Concede permissão de execução
    - ./script/remove_container.sh # Executa o script para remover containers antigos
    - sudo apt update
    # Instalar o Docker Compose
    - sudo apt install docker-compose-plugin
    # Verificar a instalação
    - docker-compose --version
  script:
    - docker-compose up -d
    # - docker run -dti --name webserver-frontend --network proxy vsantosmt/portfolio-frontend:$VERSION
    # - docker run -dti --name webserver-backend --network proxy vsantosmt/portfolio-backend:$VERSION
    # - docker run -dti --name webserver-traefik --network proxy traefik:v3.2
    # # Inicia o Traefik, que agora irá rotear o tráfego para o frontend e o backend.

cleanup_images:
  stage: cleanup
  tags:
    - $PROJECT_TAG
  needs:
    - execute_container
  script:
    - chmod +x script/cleanup_images.sh # Concede permissão de execução
    - ./script/cleanup_images.sh # Executa o script de limpeza de imagens
